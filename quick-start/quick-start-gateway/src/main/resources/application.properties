server.port=9527

spring.application.name=quick-start-gateway

# consul 配置
## 指定 consul 服务地址
spring.cloud.consul.host=192.168.0.100
spring.cloud.consul.port=8500
## 使用 IP 地址注册
spring.cloud.consul.discovery.prefer-ip-address=true

# 采样率，默认0.1（0.1表示10次只有一次被记录）
management.tracing.sampling.probability=1.0
# zipkin 地址
management.zipkin.tracing.endpoint=http://192.168.0.100:9411/api/v2/spans
# 日志记录格式（包括应用程序名称、TraceId、SpanId）
logging.pattern.level=${spring.application.name:},%X{traceId:-},%X{spanId:-}

# 网关配置
# 测试用例：curl "http://localhost:9527/provider/hello?name=2&userLevel=11" --cookie "username=admin"
# 是否启用网关，默认为 true
spring.cloud.gateway.enabled=true
# 路由配置（用于谓词配置）
# 路由 id，没有固定规则但是需要唯一，建议配置服务名
spring.cloud.gateway.routes[0].id=quick-start-provider
# 匹配后提供者的服务路由地址，初次使用可以写死
#spring.cloud.gateway.routes[0].uri=http://localhost:8000
# 匹配后提供者的服务路由地址，lb:// 开头，表示使用服务名
spring.cloud.gateway.routes[0].uri=lb://quick-start-provider
# PathRoutePredicateFactory 配置（这里表示匹配 /provider 路径）
spring.cloud.gateway.routes[0].predicates[0]=Path=/provider/**
# AfterRoutePredicateFactory 配置（这里表示配置的时间点之后才能访问）
spring.cloud.gateway.routes[0].predicates[1]=After=2024-10-06T21:55:00.0+08:00[Asia/Shanghai]
# BeforeRoutePredicateFactory 配置（这里表示配置的时间点之前才能访问）
spring.cloud.gateway.routes[0].predicates[2]=Before=2099-10-06T22:23:00.0+08:00[Asia/Shanghai]
# CookieRoutePredicateFactory 配置（匹配 Cookie 值）
spring.cloud.gateway.routes[0].predicates[3]=Cookie=username,admin
# 自定义谓词（full模式）
#spring.cloud.gateway.routes[0].predicates[4].name=UserLevel
#spring.cloud.gateway.routes[0].predicates[4].args.userLevel=10
# 自定义谓词（short模式）
spring.cloud.gateway.routes[0].predicates[4]=UserLevel=10
# 过滤器（移除第一个前缀）
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

# 测试用例：curl "http://localhost:9527/provider-filter/hello4GatewayFilter"
# 路由配置（用于过滤器配置）
spring.cloud.gateway.routes[1].uri=lb://quick-start-provider
spring.cloud.gateway.routes[1].predicates[0]=Path=/provider-filter/**
# 过滤器（移除第一个前缀）
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1
# 访问后端服务的时候添加请求头
spring.cloud.gateway.routes[1].filters[1]=AddRequestHeader=X-Request-service,${spring.application.name}
# 移除请求头
spring.cloud.gateway.routes[1].filters[2]=RemoveRequestHeader=sec-fetch-user
# 重写请求头
spring.cloud.gateway.routes[1].filters[3]=SetRequestHeader=sec-fetch-site,same-origin
# 添加请求参数
spring.cloud.gateway.routes[1].filters[4]=AddRequestParameter=applicationName,${spring.application.name}
# 移除请求参数
spring.cloud.gateway.routes[1].filters[5]=RemoveRequestParameter=applicationName
# 添加响应头
spring.cloud.gateway.routes[1].filters[6]=AddResponseHeader=X-Response-service,${spring.application.name}
# 移除响应头
spring.cloud.gateway.routes[1].filters[7]=RemoveResponseHeader=X-Response-data
# 重写响应头
spring.cloud.gateway.routes[1].filters[8]=SetResponseHeader=X-Response-date,2099-01-01
# 自动添加路径前缀
spring.cloud.gateway.routes[1].filters[9]=PrefixPath=/quick-start-provider

# 测试用例：curl "http://localhost:9527/gateway/hello4GatewayFilterPath"
# 路由配置（用于过滤器配置）
spring.cloud.gateway.routes[2].uri=lb://quick-start-provider
# {segment} 占位符，谓词，需要配置 SetPath 使用，路径层级需要保持一致，会被 SetPath 取代
spring.cloud.gateway.routes[2].predicates[0]=Path=/gateway/{segment}
spring.cloud.gateway.routes[2].filters[0]=SetPath=/quick-start-provider/{segment}

# 测试用例（需要在浏览器上访问）：http://localhost:9527/gatewayRedirectTo/hello4GatewayFilterRedirectTo
# 路由配置（用于过滤器配置）
spring.cloud.gateway.routes[3].uri=lb://quick-start-provider
spring.cloud.gateway.routes[3].predicates[0]=Path=/gatewayRedirectTo/{segment}
spring.cloud.gateway.routes[3].filters[0]=SetPath=/quick-start-provider/{segment}
# 重定向
spring.cloud.gateway.routes[3].filters[1]=RedirectTo=302,https://www.baidu.com